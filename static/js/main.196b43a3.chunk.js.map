{"version":3,"sources":["components/header.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","softShadows","SpinningMesh","position","color","speed","args","mesh","useRef","useFrame","current","rotation","x","y","useState","expand","setExpand","props","useSpring","scale","ref","onClick","castShadow","attach","factor","App","colorManagement","shadowMap","camera","fov","intensity","shadow-mapSize-width","shadow-mapSize-height","shadow-camera-far","shadow-camera-left","shadow-camera-right","shadow-camera-top","shadow-camera-bottom","Math","PI","receiveShadow","opacity","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yQAeeA,EAbA,WACb,OACE,gCACE,yBAAKC,UAAU,QACb,oDAEF,yBAAKA,UAAU,WACb,0C,gBCIRC,cAEA,IAAMC,EAAe,SAAC,GAAsC,IAApCC,EAAmC,EAAnCA,SAAUC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,KAExCC,EAAOC,mBAGbC,aAAS,kBAAOF,EAAKG,QAAQC,SAASC,EAAIL,EAAKG,QAAQC,SAASE,GAAK,OALZ,MAQ7BC,oBAAS,GARoB,mBAQlDC,EARkD,KAQ1CC,EAR0C,KAUnDC,EAAQC,YAAU,CACtBC,MAAOJ,EAAS,CAAC,IAAK,IAAK,KAAO,CAAC,EAAG,EAAG,KAE3C,OACE,kBAAC,IAAER,KAAH,CACEJ,SAAUA,EACViB,IAAKb,EACLc,QAAS,kBAAML,GAAWD,IAC1BI,MAAOF,EAAME,MACbG,YAAU,GACV,uCAAmBC,OAAO,WAAWjB,KAAMA,IAC3C,kBAAC,IAAD,CACEF,MAAOA,EACPC,MAAOA,EACPkB,OAAO,WACPC,OAAQ,OAoEDC,EApDH,WACV,OACE,oCACE,kBAAC,EAAD,MAEA,kBAAC,IAAD,CACEC,iBAAe,EACfC,WAAS,EACTC,OAAQ,CAAEzB,SAAU,EAAE,EAAG,EAAG,IAAK0B,IAAK,KAEtC,kCAAcC,UAAW,KAEzB,sCACER,YAAU,EACVnB,SAAU,CAAC,EAAG,GAAI,GAClB2B,UAAW,IACXC,uBAAsB,KACtBC,wBAAuB,KACvBC,oBAAmB,GACnBC,sBAAqB,GACrBC,sBAAqB,GACrBC,oBAAmB,GACnBC,wBAAuB,KAGzB,gCAAYlC,SAAU,EAAE,GAAI,GAAI,IAAK2B,UAAW,KAChD,gCAAY3B,SAAU,CAAC,GAAI,GAAI,GAAI2B,UAAW,MAC9C,+BAEE,0BACEnB,SAAU,EAAE2B,KAAKC,GAAK,EAAG,EAAG,GAC5BpC,SAAU,CAAC,GAAI,EAAG,GAClBqC,eAAa,GACb,yCAAqBjB,OAAO,WAAWjB,KAAM,CAAC,IAAK,OACnD,oCAAgBiB,OAAO,WAAWkB,QAAS,MAE7C,kBAAC,EAAD,CACEtC,SAAU,CAAC,EAAG,EAAG,GACjBC,MAAM,YACNE,KAAM,CAAC,EAAG,EAAG,GACbD,MAAO,IAET,kBAAC,EAAD,CAAcF,SAAU,EAAE,EAAG,GAAI,GAAIC,MAAM,OAAOC,MAAO,IACzD,kBAAC,EAAD,CAAcF,SAAU,CAAC,EAAG,GAAI,GAAIC,MAAM,OAAOC,MAAO,KAG1D,kBAAC,IAAD,SC1FYqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.196b43a3.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Header = () => {\n  return (\n    <header>\n      <div className='logo'>\n        <span>REACT THREE FIBER</span>\n      </div>\n      <div className='episode'>\n        <span>EP. 1</span>\n      </div>\n    </header>\n  );\n};\n\nexport default Header;\n","import React, { useRef, useState } from \"react\";\n//R3F\nimport { Canvas, useFrame } from \"react-three-fiber\";\n// Deai - R3F\nimport { softShadows, MeshWobbleMaterial, OrbitControls } from \"drei\";\n//Components\nimport Header from \"./components/header\";\n// Styles\nimport \"./App.scss\";\n// React Spring\nimport { useSpring, a } from \"react-spring/three\";\n\n// soft Shadows\nsoftShadows();\n\nconst SpinningMesh = ({ position, color, speed, args }) => {\n  //ref to target the mesh\n  const mesh = useRef();\n\n  //useFrame allows us to re-render/update rotation on each frame\n  useFrame(() => (mesh.current.rotation.x = mesh.current.rotation.y += 0.01));\n\n  //Basic expand state\n  const [expand, setExpand] = useState(false);\n  // React spring expand animation\n  const props = useSpring({\n    scale: expand ? [1.4, 1.4, 1.4] : [1, 1, 1],\n  });\n  return (\n    <a.mesh\n      position={position}\n      ref={mesh}\n      onClick={() => setExpand(!expand)}\n      scale={props.scale}\n      castShadow>\n      <boxBufferGeometry attach='geometry' args={args} />\n      <MeshWobbleMaterial\n        color={color}\n        speed={speed}\n        attach='material'\n        factor={0.6}\n      />\n    </a.mesh>\n\n    //Using Drei box if you want\n    // <Box {...props} ref={mesh} castShadow>\n    //   <MeshWobbleMaterial\n    //     {...props}\n    //     attach='material'\n    //     factor={0.6}\n    //     Speed={1}\n    //   />\n    // </Box>\n  );\n};\n\nconst App = () => {\n  return (\n    <>\n      <Header />\n      {/* Our Scene & Camera is already built into our canvas */}\n      <Canvas\n        colorManagement\n        shadowMap\n        camera={{ position: [-5, 2, 10], fov: 60 }}>\n        {/* This light makes things look pretty */}\n        <ambientLight intensity={0.3} />\n        {/* Our main source of light, also casting our shadow */}\n        <directionalLight\n          castShadow\n          position={[0, 10, 0]}\n          intensity={1.5}\n          shadow-mapSize-width={1024}\n          shadow-mapSize-height={1024}\n          shadow-camera-far={50}\n          shadow-camera-left={-10}\n          shadow-camera-right={10}\n          shadow-camera-top={10}\n          shadow-camera-bottom={-10}\n        />\n        {/* A light to help illumnate the spinning boxes */}\n        <pointLight position={[-10, 0, -20]} intensity={0.5} />\n        <pointLight position={[0, -10, 0]} intensity={1.5} />\n        <group>\n          {/* This mesh is the plane (The floor) */}\n          <mesh\n            rotation={[-Math.PI / 2, 0, 0]}\n            position={[0, -3, 0]}\n            receiveShadow>\n            <planeBufferGeometry attach='geometry' args={[100, 100]} />\n            <shadowMaterial attach='material' opacity={0.3} />\n          </mesh>\n          <SpinningMesh\n            position={[0, 1, 0]}\n            color='lightblue'\n            args={[3, 2, 1]}\n            speed={2}\n          />\n          <SpinningMesh position={[-2, 1, -5]} color='pink' speed={6} />\n          <SpinningMesh position={[5, 1, -2]} color='pink' speed={6} />\n        </group>\n        {/* Allows us to move the canvas around for different prespectives */}\n        <OrbitControls />\n      </Canvas>\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}